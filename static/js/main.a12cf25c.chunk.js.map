{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a12cf25c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return(\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n        <input \r\n            value={newTaskContent}\r\n            className=\"form__input\" \r\n            placeholder=\"Co jest do zrobienia?\"\r\n            onChange={({target}) => setNewTaskContent(target.value)}\r\n        />\r\n        <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n)};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n    <ul \r\n    className=\"tasks__items\">\r\n        {tasks.map(task => (\r\n            <li\r\n            key={task.id} className={`tasks__item${task.done && hideDone ? \" tasks__item--hidden\" : \"\"}`}\r\n            >\r\n            <button \r\n                onClick={() => toggleTaskDone(task.id)}\r\n                className=\"tasks__button tasks__button--done\">\r\n                <i className={`fas fa-check${task.done ? \"\" : \" fa-check--none\" }`}></i>\r\n            </button>\r\n        <span className={`tasks__text${task.done ? \" tasks__text--done\" : \"\"}`}>{task.id} - {task.content}</span>\r\n            <button  \r\n                onClick={() => removeTask(task.id)}\r\n                className=\"tasks__button tasks__button--delete\">\r\n                <i className=\"far fa-trash-alt\"></i>\r\n            </button>\r\n            </li>\r\n        ))};\r\n    </ul>\r\n        );\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 &&  (\r\n            <>\r\n        <button \r\n            onClick={toggleHideDone} \r\n            className=\"buttons__button buttons__button--hide\">\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n        </button>\r\n        <button \r\n            onClick={setAllDone}\r\n            className=\"buttons__button\"\r\n            disabled={tasks.every(({done}) => done)}\r\n        >\r\n            Ukończ wszystkie\r\n        </button>\r\n        </>\r\n        )}\r\n    </div>\r\n\r\n)\r\nexport default Buttons;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n            <header className=\"section__header\">\r\n                <h2>{title}</h2>\r\n                {extraHeaderContent}\r\n            </header>\r\n            <div className=\"section__body\">\r\n                {body}\r\n            </div>\r\n         \r\n        </section>\r\n\r\n)\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n \r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n)\r\n\r\nexport default Container;","import React, { useState } from 'react';\nimport Form from './Form';\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\n\nfunction App() {\nconst [hideDone, setHideDone] = useState(false);\nconst[tasks, setTasks] = useState([\n  {id: 1, content: \"przejść na Reacta\", done: false},\n  {id: 2, content: \"zrobić sobie wakację\", done: true}\n]);\n\nconst toggleHideDone = () => {\n  setHideDone(hideDone => !hideDone);\n};\n\nconst removeTask = (id) => {\n  setTasks(tasks => tasks.filter(task => task.id !==id));\n};\n\nconst toggleTaskDone = (id) => {\n  setTasks(tasks => tasks.map(task => {\n    if(task.id === id) {\n      return { ...task, done: !task.done };\n    }\n    return task;\n  }));\n};\n\nconst setAllDone = () => {\n  setTasks(tasks => tasks.map(task => ({\n    ...task, \n    done: true,\n  })));\n};\n\nconst addNewTask = (content) => {\n  if(content !== \"\"){\n  setTasks(tasks => [\n    ...tasks,\n    {\n      content,\n      done: false,\n      id: tasks.length  ? tasks[tasks.length - 1].id + 1 : 1,\n    },\n  ]);}\n};\n\n  return (\n    <Container>\n        <Header \n        title=\"Lista zadań\"\n        />\n\n        <Section \n          title=\"Dodaj nowe zadanie\" \n          body={<Form addNewTask={addNewTask}/>}\n        />\n\n        <Section \n          title=\"Lista zadań\" \n          extraHeaderContent={\n          <Buttons \n            tasks={tasks} \n            hideDone={hideDone} \n            toggleHideDone={toggleHideDone} \n            setAllDone={setAllDone}\n          />}\n          body={\n          <Tasks \n            tasks={tasks} \n            hideDone={hideDone}  \n            removeTask={removeTask} \n            toggleTaskDone={toggleTaskDone} \n          />}\n        />\n\n    </Container>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}